(window.webpackJsonp=window.webpackJsonp||[]).push([[288],{673:function(v,_,t){"use strict";t.r(_);var r=t(54),s=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"关于贪心算法-你该了解这些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于贪心算法-你该了解这些"}},[v._v("#")]),v._v(" 关于贪心算法，你该了解这些！")]),v._v(" "),t("p",[v._v("题目分类大纲如下：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://code-thinking-1253855093.file.myqcloud.com/pics/20210917104315.png",width:"600",alt:"贪心算法大纲"}})]),v._v(" "),t("h2",{attrs:{id:"什么是贪心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是贪心"}},[v._v("#")]),v._v(" 什么是贪心")]),v._v(" "),t("p",[t("strong",[v._v("贪心的本质是选择每一阶段的局部最优，从而达到全局最优")]),v._v("。")]),v._v(" "),t("p",[v._v("这么说有点抽象，来举一个例子：")]),v._v(" "),t("p",[v._v("例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？")]),v._v(" "),t("p",[v._v("指定每次拿最大的，最终结果就是拿走最大数额的钱。")]),v._v(" "),t("p",[v._v("每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。")]),v._v(" "),t("p",[v._v("再举一个例子如果是 有一堆盒子，你有一个背包体积为 n，如何把背包尽可能装满，如果还每次选最大的盒子，就不行了。这时候就需要动态规划。动态规划的问题在下一个系列会详细讲解。")]),v._v(" "),t("h2",{attrs:{id:"贪心的套路-什么时候用贪心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪心的套路-什么时候用贪心"}},[v._v("#")]),v._v(" 贪心的套路（什么时候用贪心）")]),v._v(" "),t("p",[v._v("很多同学做贪心的题目的时候，想不出来是贪心，想知道有没有什么套路可以一看就看出来是贪心。")]),v._v(" "),t("p",[t("strong",[v._v("说实话贪心算法并没有固定的套路")]),v._v("。")]),v._v(" "),t("p",[v._v("所以唯一的难点就是如何通过局部最优，推出整体最优。")]),v._v(" "),t("p",[v._v("那么如何能看出局部最优是否能推出整体最优呢？有没有什么固定策略或者套路呢？")]),v._v(" "),t("p",[t("strong",[v._v("不好意思，也没有！")]),v._v(" 靠自己手动模拟，如果模拟可行，就可以试一试贪心策略，如果不可行，可能需要动态规划。")]),v._v(" "),t("p",[v._v("有同学问了如何验证可不可以用贪心算法呢？")]),v._v(" "),t("p",[t("strong",[v._v("最好用的策略就是举反例，如果想不到反例，那么就试一试贪心吧")]),v._v("。")]),v._v(" "),t("p",[v._v("可有有同学认为手动模拟，举例子得出的结论不靠谱，想要严格的数学证明。")]),v._v(" "),t("p",[v._v("一般数学证明有如下两种方法：")]),v._v(" "),t("ul",[t("li",[v._v("数学归纳法")]),v._v(" "),t("li",[v._v("反证法")])]),v._v(" "),t("p",[v._v("看教课书上讲解贪心可以是一堆公式，估计大家连看都不想看，所以数学证明就不在我要讲解的范围内了，大家感兴趣可以自行查找资料。")]),v._v(" "),t("p",[t("strong",[v._v("面试中基本不会让面试者现场证明贪心的合理性，代码写出来跑过测试用例即可，或者自己能自圆其说理由就行了")]),v._v("。")]),v._v(" "),t("p",[v._v("举一个不太恰当的例子：我要用一下 1+1 = 2，但我要先证明 1+1 为什么等于 2。严谨是严谨了，但没必要。")]),v._v(" "),t("p",[v._v("虽然这个例子很极端，但可以表达这么个意思："),t("strong",[v._v("刷题或者面试的时候，手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("例如刚刚举的拿钞票的例子，就是模拟一下每次拿做大的，最后就能拿到最多的钱，这还要数学证明的话，其实就不在算法面试的范围内了，可以看看专业的数学书籍！")])]),v._v(" "),t("p",[v._v("所以这也是为什么很多同学通过（accept）了贪心的题目，但都不知道自己用了贪心算法，"),t("strong",[v._v("因为贪心有时候就是常识性的推导，所以会认为本应该就这么做！")])]),v._v(" "),t("p",[t("strong",[v._v("那么刷题的时候什么时候真的需要数学推导呢？")])]),v._v(" "),t("p",[v._v("例如这道题目："),t("a",{attrs:{href:"https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("链表：环找到了，那入口呢？"),t("OutboundLink")],1),v._v("，这道题不用数学推导一下，就找不出环的起始位置，想试一下就不知道怎么试，这种题目确实需要数学简单推导一下。")]),v._v(" "),t("h2",{attrs:{id:"贪心一般解题步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪心一般解题步骤"}},[v._v("#")]),v._v(" 贪心一般解题步骤")]),v._v(" "),t("p",[v._v("贪心算法一般分为如下四步：")]),v._v(" "),t("ul",[t("li",[v._v("将问题分解为若干个子问题")]),v._v(" "),t("li",[v._v("找出适合的贪心策略")]),v._v(" "),t("li",[v._v("求解每一个子问题的最优解")]),v._v(" "),t("li",[v._v("将局部最优解堆叠成全局最优解")])]),v._v(" "),t("p",[v._v("其实这个分的有点细了，真正做题的时候很难分出这么详细的解题步骤，可能就是因为贪心的题目往往还和其他方面的知识混在一起。")]),v._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("本篇给出了什么是贪心以及大家关心的贪心算法固定套路。")]),v._v(" "),t("p",[t("strong",[v._v("不好意思了，贪心没有套路，说白了就是常识性推导加上举反例")]),v._v("。")]),v._v(" "),t("p",[v._v("最后给出贪心的一般解题步骤，大家可以发现这个解题步骤也是比较抽象的，不像是二叉树，回溯算法，给出了那么具体的解题套路和模板。")]),v._v(" "),t("p",[v._v("本篇没有配图，其实可以找一些动漫周边或者搞笑的图配一配（符合大多数公众号文章的作风），但这不是我的风格，所以本篇文字描述足以！")]),v._v(" "),t("hr"),v._v(" "),t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:"https://code-thinking.cdn.bcebos.com/pics/01二维码一.jpg",width:"500"}})])])}),[],!1,null,null,null);_.default=s.exports}}]);